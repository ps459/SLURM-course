Firstly, all SL1 and SL2 jobs start out with the same priority, whatever the size or advertised
duration of their job. Similarly, all SL3 jobs start out with the same significantly lower priority,
which means that they are always (by design) disadvantaged relative to paying jobs.

The initial priority is then adjusted in two ways: firstly it increases steadily the longer the job
is eligible but waiting to run. Secondly, there is a "fairshare" adjustment which modifies
priorities in order to promote projects who haven't had much recent usage, and those SL1 projects
currently under target. This effect is damped if you have been achieving a lot of usage, or have
already met your quarterly target if you have one, in order to give projects who haven't a crack of
the whip. The end result of this is a list of waiting jobs ordered by priority. The main scheduling
cycle then allocates the jobs at the top of the queue nodes until every available node is either
busy or reserved by a multinode job gathering sufficient nodes to run. The jobs waiting at the top
of the queue then must wait for the job or jobs already running to complete and release their
reserved nodes. This final stage of the wait depends on the walltimes of the jobs already running,
but certainly cannot exceed 36 hours as this is the maximum allowed duration of any job.
(Occasionally we are asked to increase this 36 hour maximum limit - it should be clear from the
above that this would have an unwelcome consequence.)

Finally, the backfill scheduler component looks for gaps (e.g. idle nodes currently reserved waiting
for a big job to start) into which waiting jobs might be slotted without delaying the start of the
reserving job. Thus if there is an idle node reserved by a job which cannot start for another 2
hours, the backfill scheduler might allocate it to a waiting single node job with a duration of less
than 2 hours, in order to improve efficiency and leave fewer nodes doing nothing. The upshot of this
is that small/short jobs have more scheduling opportunities and in general may flow through the
queue faster than a maximum size, maximum duration job. (For this reason it is important to mark a
job that will take less than the maximum time as such by setting a realistic walltime.)
